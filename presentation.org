#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: GRSTAPS presentation
#+date: 2023-02-02 
#+author: John Phillips, Steve Willson
#+email: john@zeus
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.0.90 (Org mode 9.3)

#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+OPTIONS: H:2

* GRSTAPs
** Introduction
GRSTAPs stands for Graphically Recursive Simultaneous Task Allocation,
Planning and Scheduling
*** screenshot                                              :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :BEAMER_col: 0.6
    :END:

   #+ATTR_LaTeX: :width 2in
   #+ATTR_LaTeX: :height 2in
   [[file:./fig1.jpeg]]

** Main points
*** Interleaving 
*** Task allocation method

** Abstract

*** Robot team coordination requires solving four problems at varying levels of abstraction
  - What - task planning
  - Who - task allocation
  - When - scheduling
  - How - motion planning
    
*** GRSTAPS Uses an interleaved planning approach
  - Incentivize compatibility among solutions generated at different levels

** Contributions
*** Agent-agnostic partially ordered planning
- Determines tasks necessary to reach the goal state without committing any agents
- Plans only include a set of tasks with ordering constraints

*** Search based approach
- Iteratively assigns agents to tasks until the task requirements are satisfied
  
**** Two heuristic functions
1. Incentivize allocations that satisfy task requirements
2. Prefer a shorter makespan

** Prior Work



** Problem Formulation - Temporal Planning
- State of the world ($W$) is represented by literals and fluents
- Goal is satisfied if each of its literals explicitly appears in the state description and each fluent is assigned to a specific value
- Initial world state $s_{init}$ and a goal state $G$, the planner's job is to find a sequence of tasks to get from $s_{init}$ to $G$

** Partial order plan
- $\pi = \langle ST, OC, CL \rangle$
- $ST$ a set of tasks
- $OC$ ordering constraint between tasks in ST
- $CL$ causal links between tasks in ST
- ordering constraint - $a_i \prec a_j$, $a_i$ must occur before $a_j$
- causal link, $a_i \xrightarrow[]{p} a_j$, indicates that precondition p of aj is supported by one of the effects of ai
- partially ordered plan can be represented by a directed graph in which each vertex represents a task and each edge represents an ordering constraint
- task network - graph where each vertex represents a task and each edge represents a temporal constraint
- partial order plan - specific type of task network that only has ordering constraints as edges
  
** Problem Formulation - Trait-based time-extended task allocation
- heterogeneous team of N robots that must collectively execute a set of tasks
- each robot is defined by its abilities/traits
- modeled as continuous variables encoded by a trait vector
- robot trait matrix includes all individual trait vectors

- each row corresponds to one robot, each column to a specific trait
- can find out the heterogeneity of agents easily interpretible
** Problem Formulation - Trait-based time-extended task allocation
- each task in task network T may be executed individually or collectively as part of a coalition, depending on the trait requirements
- traits required by an individual task ai are defined by a task trait requirement vector

- can model the assignment of agents to tasks by an allocation matrix
- 1 if the nth robot is assigned to the mth task, 0 otherwise

- solution to a trait based task allocation problem is an assignment of robots to tasks in the task network
- allocation $A$ satisfies $Y_\pi$ when $AQ$ is an element-wise greater than or equal to $Y_\pi$


** Problem Formulation - Scheduling

** Problem Formulation - Motion Planning

** Problem Formulation - STAP-STC

** Framework - Assumptions

** Framework - Task planning

** Framework - Task allocation

** Framework - Scheduling

** Framework - Motion Planning

** Evaluation

** Application to TBAM
*** Separate task planning from allocation and scheduling
